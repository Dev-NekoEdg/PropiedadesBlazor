@page "/categories/update/{id:int}"
@using Propiedades.DTOs
@using Propiedades.Repositories
@using System.ComponentModel.DataAnnotations
@inject ICategoryRepository repository;
@inject NavigationManager navManager;


<div class="card">
    <div class="card-header">
        <h3>Update Category</h3>
    </div>
    <div class="card-body">
        <EditForm Model="@category" FormName="UpdateCategoryForm" OnValidSubmit="Save">
            <DataAnnotationsValidator></DataAnnotationsValidator>

            <div class="mb-3">
                <label class="form-label">Name</label>
                <InputText @bind-Value="category.Name" class="form-control" placeholder="Ranch"></InputText>
                <ValidationMessage For="() => category.Name"></ValidationMessage>
            </div>

            <div class="mb-3">
                <label class="form-label">Description</label>
                <InputTextArea @bind-Value="category.Description" rows="2" class="form-control" placeholder=""></InputTextArea>
            </div>
            <ValidationSummary></ValidationSummary>
            <NavLink class="btn btn-secondary" href="categories"><i class="bi bi-box-arrow-left"></i> Back to Categories</NavLink>
            <button type="submit" class="btn btn-success"><i class="bi bi-check2-square"></i> Save</button>
        </EditForm>
    </div>
</div>
@code {
    [Parameter]
    public int? Id { get; set; }

    private CategoryDTO category = new CategoryDTO();

    protected override async Task OnInitializedAsync()
    {
        if (Id != null)
        {
            category = await repository.GetByIdAsync(Id.Value);
        }

        // return base.OnInitializedAsync();
    }


    private async Task Save()
    {
        var x = category;
        var validation = await repository.GetByNameAsync(category.Name);

        if (validation != null)
        {
            return;
        }

        // Save Category
        var savedCategory = await repository.UpdateAsync(Id.Value, category);

        navManager.NavigateTo("Categories");
    }
}
